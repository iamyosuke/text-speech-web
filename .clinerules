# Cline Rules for Text-Speech-Web Project

## プロジェクト規則

### 1. コーディング規約
- TypeScriptの厳格モードを使用
- コンポーネントはアトミックデザインに従う
- ファイル名はPascalCase（コンポーネント）またはcamelCase
- 関数コンポーネントとアロー関数を優先使用

### 2. ファイル構造
```
src/
  components/    # UIコンポーネント
    atoms/       # 基本要素
    molecules/   # 複合要素
    organisms/   # 機能ブロック
  hooks/         # カスタムフック
  services/      # APIサービス
  types/         # 型定義
  utils/         # ユーティリティ
```

### 3. 命名規則
- コンポーネント: PascalCase (例: VoiceRecorder.tsx)
- フック: use前缀 (例: useAudioRecording.ts)
- 型定義: 名詞+Type (例: SessionType)
- ユーティリティ: camelCase (例: formatTimestamp.ts)

### 4. プロジェクト固有のパターン
- 音声関連処理は専用フックに分離
- AI通信は専用サービスクラスで管理
- 状態管理はReact Query + Context
- エラーハンドリングは統一フォーマット

### 5. コミットメッセージ
- feat(scope): 新機能
- fix(scope): バグ修正
- refactor(scope): リファクタリング
- style(scope): スタイル変更
- docs(scope): ドキュメント

### 6. ブランチ戦略
- main: 本番環境
- develop: 開発環境
- feature/*: 機能開発
- fix/*: バグ修正

## 開発フロー

### 1. 機能実装手順
1. 要件の確認（メモリーバンク参照）
2. 技術調査・検証
3. コンポーネント設計
4. 実装・テスト
5. コードレビュー
6. メモリーバンク更新

### 2. レビュー基準
- TypeScript型の適切な使用
- エラーハンドリングの実装
- パフォーマンスへの考慮
- アクセシビリティ対応
- テストの充実度

### 3. 品質基準
- TSコンパイルエラーなし
- ESLintエラーなし
- テストカバレッジ70%以上
- Lighthouseスコア80以上
- a11y警告なし

## メモリーバンクのメンテナンス

### 1. 更新タイミング
- 新機能実装時
- 重要な技術選定時
- アーキテクチャ変更時
- 仕様変更時

### 2. 更新対象ファイル
- activeContext.md: 作業状況
- progress.md: 進捗管理
- systemPatterns.md: 設計変更
- techContext.md: 技術変更

## UI/UXガイドライン

### 1. デザインシステム
- TailwindCSSによる一貫したスタイリング
- モバイルファーストのレスポンシブ設計
- アクセシビリティ対応必須
- ダークモード対応

### 2. インタラクション
- 音声入力時の視覚的フィードバック
- ローディング状態の明示
- エラー表示の統一
- アニメーションの適切な使用
